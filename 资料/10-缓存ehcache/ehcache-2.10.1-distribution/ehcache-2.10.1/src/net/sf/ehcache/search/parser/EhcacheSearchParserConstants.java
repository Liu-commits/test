/* Generated By:JavaCC: Do not edit this line. EhcacheSearchParserConstants.java */
package net.sf.ehcache.search.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EhcacheSearchParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int KW_STAR = 1;
  /** RegularExpression Id. */
  int KW_ALL = 2;
  /** RegularExpression Id. */
  int KW_COMMA = 3;
  /** RegularExpression Id. */
  int KW_OPEN_PAREN = 4;
  /** RegularExpression Id. */
  int KW_CLOSED_PAREN = 5;
  /** RegularExpression Id. */
  int KW_LSQUARE = 6;
  /** RegularExpression Id. */
  int KW_RSQUARE = 7;
  /** RegularExpression Id. */
  int KW_EQ = 8;
  /** RegularExpression Id. */
  int KW_NE = 9;
  /** RegularExpression Id. */
  int KW_NULL = 10;
  /** RegularExpression Id. */
  int KW_NOT_NULL = 11;
  /** RegularExpression Id. */
  int KW_GE = 12;
  /** RegularExpression Id. */
  int KW_GT = 13;
  /** RegularExpression Id. */
  int KW_LE = 14;
  /** RegularExpression Id. */
  int KW_LT = 15;
  /** RegularExpression Id. */
  int KW_KEY = 16;
  /** RegularExpression Id. */
  int KW_VALUE = 17;
  /** RegularExpression Id. */
  int KW_WHERE = 18;
  /** RegularExpression Id. */
  int KW_NOT = 19;
  /** RegularExpression Id. */
  int KW_ISBETWEEN = 20;
  /** RegularExpression Id. */
  int KW_BETWEEN = 21;
  /** RegularExpression Id. */
  int KW_ILIKE = 22;
  /** RegularExpression Id. */
  int KW_LIKE = 23;
  /** RegularExpression Id. */
  int KW_IN = 24;
  /** RegularExpression Id. */
  int KW_AND = 25;
  /** RegularExpression Id. */
  int KW_OR = 26;
  /** RegularExpression Id. */
  int KW_SUM = 27;
  /** RegularExpression Id. */
  int KW_MAX = 28;
  /** RegularExpression Id. */
  int KW_MIN = 29;
  /** RegularExpression Id. */
  int KW_AVG = 30;
  /** RegularExpression Id. */
  int KW_COUNT = 31;
  /** RegularExpression Id. */
  int KW_SELECT = 32;
  /** RegularExpression Id. */
  int KW_FROM = 33;
  /** RegularExpression Id. */
  int KW_LIMIT = 34;
  /** RegularExpression Id. */
  int KW_BOOL_CAST = 35;
  /** RegularExpression Id. */
  int KW_BYTE_CAST = 36;
  /** RegularExpression Id. */
  int KW_INT_CAST = 37;
  /** RegularExpression Id. */
  int KW_SHORT_CAST = 38;
  /** RegularExpression Id. */
  int KW_LONG_CAST = 39;
  /** RegularExpression Id. */
  int KW_FLOAT_CAST = 40;
  /** RegularExpression Id. */
  int KW_DOUBLE_CAST = 41;
  /** RegularExpression Id. */
  int KW_DATE_CAST = 42;
  /** RegularExpression Id. */
  int KW_STRING_CAST = 43;
  /** RegularExpression Id. */
  int KW_SQLDATE_CAST = 44;
  /** RegularExpression Id. */
  int KW_CHAR_CAST = 45;
  /** RegularExpression Id. */
  int KW_SHORT_DESC = 46;
  /** RegularExpression Id. */
  int KW_SHORT_ASC = 47;
  /** RegularExpression Id. */
  int KW_DESC = 48;
  /** RegularExpression Id. */
  int KW_ASC = 49;
  /** RegularExpression Id. */
  int KW_ORDER_BY = 50;
  /** RegularExpression Id. */
  int KW_USE_CACHE = 51;
  /** RegularExpression Id. */
  int KW_USE_CACHE_MANAGER = 52;
  /** RegularExpression Id. */
  int KW_GROUP_BY = 53;
  /** RegularExpression Id. */
  int FIXEDINT = 54;
  /** RegularExpression Id. */
  int QUOTEDSTR = 55;
  /** RegularExpression Id. */
  int STRING = 56;
  /** RegularExpression Id. */
  int ENUMFQCLASSNAME = 57;
  /** RegularExpression Id. */
  int FQCLASSNAME = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"*\"",
    "\"all\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\"!=\"",
    "\"IS NULL\"",
    "\"IS NOT NULL\"",
    "\">=\"",
    "\">\"",
    "\"<=\"",
    "\"<\"",
    "\"key\"",
    "\"value\"",
    "\"where\"",
    "\"not\"",
    "\"isbetween\"",
    "\"between\"",
    "\"ilike\"",
    "\"like\"",
    "\"in\"",
    "\"and\"",
    "\"or\"",
    "\"sum\"",
    "\"max\"",
    "\"min\"",
    "<KW_AVG>",
    "\"count\"",
    "\"select\"",
    "\"from\"",
    "\"limit\"",
    "\"(bool)\"",
    "\"(byte)\"",
    "\"(int)\"",
    "\"(short)\"",
    "\"(long)\"",
    "\"(float)\"",
    "\"(double)\"",
    "\"(date)\"",
    "\"(string)\"",
    "\"(sqldate)\"",
    "\"(char)\"",
    "\"desc\"",
    "\"asc\"",
    "\"descending\"",
    "\"ascending\"",
    "\"order by\"",
    "\"use cache\"",
    "\"use cache manager\"",
    "\"group by\"",
    "<FIXEDINT>",
    "<QUOTEDSTR>",
    "<STRING>",
    "<ENUMFQCLASSNAME>",
    "<FQCLASSNAME>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
  };

}
